{"ast":null,"code":"var _jsxFileName = \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/src/components/Quiz.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\nimport Select from 'react-select';\n\nfunction Quiz(props) {\n  var questionType = props.questionType;\n\n  function renderAnswerOptions(key) {\n    return React.createElement(AnswerOption, {\n      key: key.content,\n      answerContent: key.content,\n      answerType: key.type,\n      answer: props.answer,\n      questionId: props.questionId,\n      onAnswerSelected: props.onAnswerSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(CSSTransitionGroup, {\n    className: \"container\",\n    component: \"div\",\n    transitionName: \"fade\",\n    transitionEnterTimeout: 800,\n    transitionLeaveTimeout: 500,\n    transitionAppear: true,\n    transitionAppearTimeout: 500,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    key: props.questionId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(QuestionCount, {\n    counter: props.questionId,\n    total: props.questionTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Question, {\n    content: props.question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), \"if (questionType == \\\"radiobutton\\\") \", React.createElement(\"ul\", {\n    className: \"answerOptions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.answerOptions.map(renderAnswerOptions)), \"if (questionType == \\\"dropdown\\\") \", React.createElement(Select, {\n    className: \"basic-single\",\n    classNamePrefix: \"select\",\n    defaultValue: props.answerOptions[0],\n    isDisabled: isDisabled,\n    isLoading: isLoading,\n    isClearable: isClearable,\n    isRtl: isRtl,\n    isSearchable: isSearchable,\n    name: \"countries\",\n    options: props.answerOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })));\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\nexport default Quiz;","map":{"version":3,"sources":["/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/src/components/Quiz.js"],"names":["React","PropTypes","CSSTransitionGroup","Question","QuestionCount","AnswerOption","Select","Quiz","props","questionType","renderAnswerOptions","key","content","type","answer","questionId","onAnswerSelected","questionTotal","question","answerOptions","map","isDisabled","isLoading","isClearable","isRtl","isSearchable","propTypes","string","isRequired","array","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAMC,YAAY,GAAGD,KAAK,CAACC,YAA3B;;AACA,WAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC,WACE,oBAAC,YAAD;AACE,MAAA,GAAG,EAAEA,GAAG,CAACC,OADX;AAEE,MAAA,aAAa,EAAED,GAAG,CAACC,OAFrB;AAGE,MAAA,UAAU,EAAED,GAAG,CAACE,IAHlB;AAIE,MAAA,MAAM,EAAEL,KAAK,CAACM,MAJhB;AAKE,MAAA,UAAU,EAAEN,KAAK,CAACO,UALpB;AAME,MAAA,gBAAgB,EAAEP,KAAK,CAACQ,gBAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAED,SACE,oBAAC,kBAAD;AACE,IAAA,SAAS,EAAC,WADZ;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,cAAc,EAAC,MAHjB;AAIE,IAAA,sBAAsB,EAAE,GAJ1B;AAKE,IAAA,sBAAsB,EAAE,GAL1B;AAME,IAAA,gBAAgB,MANlB;AAOE,IAAA,uBAAuB,EAAE,GAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE;AAAK,IAAA,GAAG,EAAER,KAAK,CAACO,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEP,KAAK,CAACO,UAA9B;AAA0C,IAAA,KAAK,EAAEP,KAAK,CAACS,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAET,KAAK,CAACU,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,2CAII;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,KAAK,CAACW,aAAN,CAAoBC,GAApB,CAAwBV,mBAAxB,CADH,CAJJ,wCASI,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,eAAe,EAAC,QAFlB;AAGE,IAAA,YAAY,EAAEF,KAAK,CAACW,aAAN,CAAoB,CAApB,CAHhB;AAIE,IAAA,UAAU,EAAEE,UAJd;AAKE,IAAA,SAAS,EAAEC,SALb;AAME,IAAA,WAAW,EAAEC,WANf;AAOE,IAAA,KAAK,EAAEC,KAPT;AAQE,IAAA,YAAY,EAAEC,YARhB;AASE,IAAA,IAAI,EAAC,WATP;AAUE,IAAA,OAAO,EAAEjB,KAAK,CAACW,aAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CATF,CADF;AAmCD;;AAEDZ,IAAI,CAACmB,SAAL,GAAiB;AACfZ,EAAAA,MAAM,EAAEb,SAAS,CAAC0B,MAAV,CAAiBC,UADV;AAEfT,EAAAA,aAAa,EAAElB,SAAS,CAAC4B,KAAV,CAAgBD,UAFhB;AAGfV,EAAAA,QAAQ,EAAEjB,SAAS,CAAC0B,MAAV,CAAiBC,UAHZ;AAIfb,EAAAA,UAAU,EAAEd,SAAS,CAAC6B,MAAV,CAAiBF,UAJd;AAKfX,EAAAA,aAAa,EAAEhB,SAAS,CAAC6B,MAAV,CAAiBF,UALjB;AAMfZ,EAAAA,gBAAgB,EAAEf,SAAS,CAAC8B,IAAV,CAAeH;AANlB,CAAjB;AASA,eAAerB,IAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\nimport Select from 'react-select'\n\nfunction Quiz(props) {\n  const questionType = props.questionType;\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        if (questionType == \"radiobutton\") {  \n          <ul className=\"answerOptions\">\n            {props.answerOptions.map(renderAnswerOptions)}\n          </ul>\n        }\n        if (questionType == \"dropdown\") {  \n          <Select\n            className=\"basic-single\"\n            classNamePrefix=\"select\"\n            defaultValue={props.answerOptions[0]}\n            isDisabled={isDisabled}\n            isLoading={isLoading}\n            isClearable={isClearable}\n            isRtl={isRtl}\n            isSearchable={isSearchable}\n            name=\"countries\"\n            options={props.answerOptions}\n          />\n        }\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}