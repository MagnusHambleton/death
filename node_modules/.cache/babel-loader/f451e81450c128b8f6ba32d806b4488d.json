{"ast":null,"code":"import _defineProperty from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/src/App.js\";\nimport React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport logo from \"./svg/logo.svg\";\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      country: '',\n      year: 0,\n      month: 0,\n      date: 0,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Nintendo: 0,\n        Microsoft: 0,\n        Sony: 0\n      },\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var shuffledAnswerOptions = this.question.answers;\n      this.setState({\n        question: quizQuestions[0].question,\n        answerOptions: shuffledAnswerOptions[0]\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex;\n      return array;\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this2 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(function () {\n          return _this2.setNextQuestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this2.setResults(_this2.getResults());\n        }, 300);\n      }\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      this.setState(function (state, props) {\n        return {\n          answersCount: _objectSpread({}, state.answersCount, _defineProperty({}, answer, state.answersCount[answer] + 1)),\n          answer: answer\n        };\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      var answersCount = this.state.answersCount;\n      var answersCountKeys = Object.keys(answersCount);\n      var answersCountValues = answersCountKeys.map(function (key) {\n        return answersCount[key];\n      });\n      var maxAnswerCount = Math.max.apply(null, answersCountValues);\n      return answersCountKeys.filter(function (key) {\n        return answersCount[key] === maxAnswerCount;\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      if (result.length === 1) {\n        this.setState({\n          result: result[0]\n        });\n      } else {\n        this.setState({\n          result: 'Undetermined'\n        });\n      }\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return React.createElement(Quiz, {\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"React Quiz\")), this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/magnushambleton/Google Drive/Coding/Death/death_quiz/react-multi-choice-quiz/src/App.js"],"names":["React","Component","quizQuestions","Quiz","Result","App","props","state","counter","questionId","country","year","month","date","question","answerOptions","answer","answersCount","Nintendo","Microsoft","Sony","result","handleAnswerSelected","bind","shuffledAnswerOptions","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","map","key","maxAnswerCount","Math","max","apply","filter","logo","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport logo from './svg/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      country:'',\n      year: 0,\n      month: 0,\n      date: 0,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Nintendo: 0,\n        Microsoft: 0,\n        Sony: 0\n      },\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentWillMount() {\n    const shuffledAnswerOptions = this.question.answers;\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: state.answersCount[answer] + 1\n      },\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>React Quiz</h2>\n        </div>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}